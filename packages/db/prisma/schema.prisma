// prisma/schema.prisma

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id         String    @id @default(uuid())
  rollNo     String    @unique
  password   String
  phone      String?
  email      String?
  name       String?
  clg        Clg
  branch     Branch
  role       Role      @default(STUDENT)
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  sessions   Session[]

  // Section and group for students
  sectionId               String?
  section                 Section?               @relation(fields: [sectionId], references: [id])
  groupId                 String?
  group                   Group?                 @relation(fields: [groupId], references: [id])

  // Teaching relationships
  taughtCourses           SectionCourse[]        // Main course instructor
  taughtComponents        CourseComponent[]      // For component-specific instructors
  attendanceRecords       AttendanceRecord[]     // For students
}

model Session {
  id        String   @id @default(uuid())
  userId    String
  ip        String
  userAgent String
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id])
}

enum Role {
  ADMIN
  TEACHER
  STUDENT
}

enum Clg {
  MRU
  MRIIRS
}

enum Branch {
  SCHOOL_OF_ENGINEERING
  SCHOOL_OF_LAW
  SCHOOL_OF_BUSINESS
  SCHOOL_OF_ARTS
}

// Academic structure
model Department {
  id          String      @id @default(uuid())
  name        String      @unique // e.g., "Computer Science", "Electrical Engineering", "Civil Engineering"
  code        String      @unique // e.g., "CSE", "EE"
  programs    Program[]
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
}

model Program {
  id           String       @id @default(uuid())
  name         String       // e.g., "Bachelor of Technology"
  code         String       // e.g., "B.Tech"
  departmentId String
  department   Department   @relation(fields: [departmentId], references: [id])
  batches      Batch[]
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt

  @@unique([code, departmentId])
}

model Batch {
  id         String     @id @default(uuid())
  year       Int        // e.g., 2022 (year of admission)
  programId  String
  program    Program    @relation(fields: [programId], references: [id])
  sections   Section[]
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt

  @@unique([year, programId])
}

model Section {
  id            String           @id @default(uuid())
  name          String           // e.g., "A", "B", "AI-ML", "CST"
  batchId       String
  batch         Batch            @relation(fields: [batchId], references: [id])
  semester      Int              // Current semester (1-8)
  students      User[]           // Students in this section
  groups        Group[]          // Groups within this section (e.g., G1, G2)
  courses       SectionCourse[]
  createdAt     DateTime         @default(now())
  updatedAt     DateTime         @updatedAt

  @@unique([name, batchId, semester])
}

model Group {
  id            String           @id @default(uuid())
  name          String           // e.g., "G1", "G2"
  sectionId     String
  section       Section          @relation(fields: [sectionId], references: [id])
  students      User[]           // Students in this group
  components    CourseComponent[] // Components specific to this group
  createdAt     DateTime         @default(now())
  updatedAt     DateTime         @updatedAt

  @@unique([name, sectionId])
}

// Courses and class schedule
model Course {
  id             String          @id @default(uuid())
  code           String          @unique // e.g., "CSE101"
  name           String          // e.g., "Introduction to Programming"
  credits        Int
  sectionCourses SectionCourse[]
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
}

model SectionCourse {
  id            String            @id @default(uuid())
  sectionId     String
  section       Section           @relation(fields: [sectionId], references: [id])
  courseId      String
  course        Course            @relation(fields: [courseId], references: [id])
  teacherId     String            // Main course instructor
  teacher       User              @relation(fields: [teacherId], references: [id])
  academicTerm  AcademicTerm      @relation(fields: [academicTermId], references: [id])
  academicTermId String
  components    CourseComponent[] // Different components (lecture, lab, tutorial)
  createdAt     DateTime          @default(now())
  updatedAt     DateTime          @updatedAt

  @@unique([sectionId, courseId, academicTermId])
}

model CourseComponent {
  id              String           @id @default(uuid())
  sectionCourseId String
  sectionCourse   SectionCourse    @relation(fields: [sectionCourseId], references: [id])
  componentType   CourseType       // LECTURE, LAB, TUTORIAL, etc.
  teacherId       String?          // Optional override if different from main course teacher
  teacher         User?            @relation(fields: [teacherId], references: [id])
  groupId         String?          // If specific to a group (G1 or G2)
  group           Group?           @relation(fields: [groupId], references: [id])
  schedules       ClassSchedule[]
  attendanceSessions AttendanceSession[]
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt

  @@unique([sectionCourseId, componentType, groupId])
}

enum CourseType {
  LECTURE
  TUTORIAL
  LABORATORY
  PRACTICAL
  SEMINAR
  PROJECT
}

model AcademicTerm {
  id            String           @id @default(uuid())
  name          String           // e.g., "Fall 2023"
  startDate     DateTime
  endDate       DateTime
  sectionCourses SectionCourse[]
  createdAt     DateTime         @default(now())
  updatedAt     DateTime         @updatedAt
}

model ClassSchedule {
  id               String          @id @default(uuid())
  componentId      String          // Now references component instead of sectionCourse
  component        CourseComponent @relation(fields: [componentId], references: [id])
  dayOfWeek        DayOfWeek
  startTime        DateTime
  endTime          DateTime
  roomNumber       String
  createdAt        DateTime        @default(now())
  updatedAt        DateTime        @updatedAt

  @@unique([componentId, dayOfWeek, startTime])
}

// Attendance tracking
model AttendanceSession {
  id              String             @id @default(uuid())
  componentId     String             // Now references component for specific type
  component       CourseComponent    @relation(fields: [componentId], references: [id])
  date            DateTime
  startTime       DateTime
  endTime         DateTime
  topic           String?            // What was taught in the class
  records         AttendanceRecord[]
  createdAt       DateTime           @default(now())
  updatedAt       DateTime           @updatedAt

  @@unique([componentId, date, startTime])
}

model AttendanceRecord {
  id                  String            @id @default(uuid())
  attendanceSessionId String
  attendanceSession   AttendanceSession @relation(fields: [attendanceSessionId], references: [id])
  studentId           String
  student             User              @relation(fields: [studentId], references: [id])
  status              AttendanceStatus
  remark              String?
  createdAt           DateTime          @default(now())
  updatedAt           DateTime          @updatedAt

  @@unique([attendanceSessionId, studentId])
}

// Enums
enum DayOfWeek {
  MONDAY
  TUESDAY
  WEDNESDAY
  THURSDAY
  FRIDAY
  SATURDAY
  SUNDAY
}

enum AttendanceStatus {
  PRESENT
  ABSENT
  LATE
  LEAVE
  EXCUSED
}
